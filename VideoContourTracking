#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/highgui/highgui.hpp"
#include <stdlib.h>
#include <stdio.h>
#include <iostream>

using namespace cv;
using namespace std;
/// Global variables

Mat src, src_gray;
Mat dst, detected_edges;

int edgeThresh = 1;
int lowThreshold=150;
// int const max_lowThreshold = 300;
int ratio = 3;
int kernel_size = 3;

/** @function main */
int main( int argc, char** argv )
{
  /// Load an image
  VideoCapture video("1.mp4");
     
  // Exit if video is not opened
  if(!video.isOpened())
  {
        cout << "Could not read video file" << endl;
        return 1;
         
  }
  int start_s=clock();

  while(video.read(src)){

    video >> src;
    /// Create a matrix of the same type and size as src (for dst)
    dst.create( src.size(), src.type() );
  
    /// Convert the image to grayscale
    cvtColor( src, src_gray, CV_BGR2GRAY );
  
    /// Create a window
    namedWindow( "Edge detect", CV_WINDOW_NORMAL);
    namedWindow( "Canny Tracking", CV_WINDOW_NORMAL );
  
    // CannyThreshold(0, 0);
    vector<vector<Point> > contours;
  
    /// Reduce noise with a kernel 3x3
    // blur( src_gray, detected_edges, Size(3,3));
    medianBlur(src_gray, detected_edges, 3);
    // imshow( "window_name", detected_edges );
  
    /// Canny detector
    Canny( detected_edges, detected_edges,lowThreshold ,lowThreshold*ratio, kernel_size );
  
    /// Using Canny's output as a mask, we display our result
    dst = Scalar::all(0);
  
    src.copyTo( dst, detected_edges);
    
    findContours( detected_edges, contours,CV_RETR_EXTERNAL, CV_CHAIN_APPROX_NONE, Point(0, 0) );
  
    cout << "Number of Objects: " << contours.size() << std::endl;
  
    vector<Moments> mu(contours.size() );
    for( int i = 0; i < contours.size(); i++ )
       { mu[i] = moments( contours[i], false ); }
  
    ///  Get the mass centers:
    vector<Point2f> mc( contours.size() );
    for( int i = 0; i < contours.size(); i++ )
       { mc[i] = Point2f( mu[i].m10/mu[i].m00 , mu[i].m01/mu[i].m00 ); }
  
    /// Draw contours
    Mat drawing = Mat::zeros( detected_edges.size(), CV_8UC3 );
    for( int i = 0; i< contours.size(); i++ )
       {
         circle( src, mc[i], 20, Scalar(255,0,0), 2, 8, 0 );
         circle( src, mc[i], 5, Scalar(255,0,0), -1, 8, 0 );
       }
  
    imshow( "Edge detect", dst );
    imshow( "Canny Tracking", src );
  
    /// Wait until user exit program by pressing a key
   if (waitKey(50) == 100) //wait for 'esc' key press for 30ms. If 'esc' key is pressed, break loop
       {
            cout << "esc key is pressed by user" << endl;
            break; 
       }
  }
  int stop_s=clock();
  cout << "time: " << (stop_s-start_s)/double(CLOCKS_PER_SEC)*1000 << endl;
  return 0;
  }
